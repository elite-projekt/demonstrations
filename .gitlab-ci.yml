stages:
  - lint
  - build
  - scan
  - push

lint:python-code:
  stage: lint
  image:
    name: python:3.10-slim
  before_script:
    - /usr/local/bin/python -m pip install --upgrade pip
    - python -m pip install flake8
  script:
    - flake8 .
  needs: []

# Hadolint template
.lint:dockerfile: &lint-dockerfile
  stage: lint
  image:
    name: registry.gitlab.com/pipeline-components/hadolint:latest
  script:
    - echo "Start hadolint for $CI_PROJECT_DIR/$SUB_PROJECT_FOLDER/Dockerfile"
    - hadolint "$CI_PROJECT_DIR/$SUB_PROJECT_FOLDER/Dockerfile" 
  needs: []

#lint:demo:begin - DO NOT CHANGE THIS LINE. required by 'init_new_demo.sh' script
lint:download-dockerfile:
  <<: *lint-dockerfile
  variables:
    SUB_PROJECT_FOLDER: demos/download/

lint:phishing-dockerfile:
  <<: *lint-dockerfile
  variables:
    SUB_PROJECT_FOLDER: demos/phishing

lint:password-dockerfile:
  <<: *lint-dockerfile
  variables:
    SUB_PROJECT_FOLDER: demos/password


sast:python-code:
  stage: lint
  image:
    name: python:3.9-slim
  before_script:
    - /usr/local/bin/python -m pip install --upgrade pip
    - python -m pip install bandit
  script:
    - bandit -r .
  allow_failure: true
  needs: []

# Build template
.build:image: &build-image
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
  script:
    - echo "starting karniko docker build for $SUB_PROJECT_NAME Image"
    - image_name="$CI_REGISTRY_IMAGE/$SUB_PROJECT_NAME:$CI_COMMIT_BRANCH"
    - /kaniko/executor
      --context "$CI_PROJECT_DIR/$SUB_PROJECT_FOLDER/"
      --dockerfile "$CI_PROJECT_DIR/$SUB_PROJECT_FOLDER/Dockerfile"
      --no-push
      --destination "$image_name"
      --tarPath "$SUB_PROJECT_NAME.tar"
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
  artifacts:
    paths:
    - $SUB_PROJECT_NAME.tar
    when: on_success
  needs:
    - lint:python-code

#build:demo:begin - DO NOT CHANGE THIS LINE. required by 'init_new_demo.sh' script
build:download-image:
  <<: *build-image
  variables:
    SUB_PROJECT_NAME: download
    SUB_PROJECT_FOLDER: demos/download/
  needs:
    - lint:download-dockerfile

build:phishing-image:
  <<: *build-image
  variables:
    SUB_PROJECT_NAME: phishing
    SUB_PROJECT_FOLDER: demos/phishing
  needs:
    - lint:phishing-dockerfile

build:password-image:
  <<: *build-image
  variables:
    SUB_PROJECT_NAME: password
    SUB_PROJECT_FOLDER: demos/password
  needs:
    - lint:password-dockerfile

build:python-service:
  stage: build
  image: $REGISTRY_URL/$GROUP_NAME/container-templates/python-windows-service-builder:master
  script:
    - cd ./native/
    #build:python:begin - DO NOT CHANGE THIS LINE. required by 'init_new_demo.sh' script
    - bash ./entrypoint-windows.sh $GROUP_NAME
  artifacts:
    paths:
      - /builds/$GROUP_NAME/demonstrations/native/src/dist/windows/*
  needs:
    - lint:python-code

# Scan template
.scan:image: &scan-image
  stage: scan
  image:
    name: aquasec/trivy:latest
  script:
    - echo "Start trivy Container Scan for $SUB_PROJECT_NAME.tar"
    # Build report
    - trivy
      --exit-code 0
      --cache-dir .trivycache/
      --no-progress
      --format template
      --template "@/contrib/gitlab.tpl"
      -o gl-container-scanning-report.json
      --ignore-unfixed
      --input $SUB_PROJECT_NAME.tar
    # Print report
    - trivy
      --exit-code 0
      --cache-dir .trivycache/
      --no-progress
      --ignore-unfixed
      --input $SUB_PROJECT_NAME.tar
    # Fail if High Findings
    - trivy
      --exit-code 1
      --cache-dir .trivycache/
      --severity HIGH
      --no-progress
      --ignore-unfixed
      --input $SUB_PROJECT_NAME.tar
  cache:
    paths:
      - .trivycache/
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
    paths:
      - $SUB_PROJECT_NAME.tar
  allow_failure: true

#scan:demo:begin - DO NOT CHANGE THIS LINE. required by 'init_new_demo.sh' script
scan:download-image:
  <<: *scan-image
  variables:
    SUB_PROJECT_NAME: download
    SUB_PROJECT_FOLDER: demos/download/
  needs:
  - build:download-image

scan:phishing-image:
  <<: *scan-image
  variables:
    SUB_PROJECT_NAME: phishing
    SUB_PROJECT_FOLDER: demos/phishing
  needs:
  - build:phishing-image

scan:password-image:
  <<: *scan-image
  variables:
    SUB_PROJECT_NAME: password
    SUB_PROJECT_FOLDER: demos/password
  needs:
  - build:password-image
  
# Push template
.push:image: &push-image
  stage: push
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [""]
  script:
  - echo "Push Container SUB_PROJECT_NAME.tar"
  - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - crane push $SUB_PROJECT_NAME.tar $CI_REGISTRY_IMAGE/$SUB_PROJECT_NAME:$CI_COMMIT_BRANCH

#push:demo:begin - DO NOT CHANGE THIS LINE. required by 'init_new_demo.sh' script
push:download-image:
  <<: *push-image
  variables:
    SUB_PROJECT_NAME: download
  needs:
  - build:download-image

push:phishing-image:
  <<: *push-image
  variables:
    SUB_PROJECT_NAME: phishing
  needs:
  - build:phishing-image

push:password-image:
  <<: *push-image
  variables:
    SUB_PROJECT_NAME: password
  needs:
  - build:password-image

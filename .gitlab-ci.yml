stages:
  - prepare
  - linting
  - build
  - scan
  - push

prepare:navigation:
  stage: prepare
  script:
    - sed -i "s|replacedByCi|$TEACHING_URL|" "demo_navigation/config/prod.env.js"
    - sh ./ci/push-navigation-image.sh

lint:python-code:
  stage: linting
  image:
    name: python:3.9-slim
  before_script:
    - /usr/local/bin/python -m pip install --upgrade pip
    - python -m pip install flake8
  script:
    - flake8 .
  allow_failure: true
  needs: []

sast:python-code:
  stage: linting
  image:
    name: python:3.9-slim
  before_script:
    - /usr/local/bin/python -m pip install --upgrade pip
    - python -m pip install bandit
  script:
    - bandit -r .
  allow_failure: true
  needs: []

# Build template
.build:image: &build-image
  stage: build
  image:
    name: gcr.io/kaniko-project/executor
  script:
    - echo "starting karniko docker build for $SUB_PROJECT_NAME Image"
    - image_name="$CI_REGISTRY_IMAGE/$SUB_PROJECT_NAME:$CI_COMMIT_BRANCH"
    - /kaniko/executor 
      --context "$CI_PROJECT_DIR/$SUB_PROJECT_FOLDER/" 
      --dockerfile "$CI_PROJECT_DIR/$SUB_PROJECT_FOLDER/Dockerfile" 
      --no-push
      --tarPath "$SUB_PROJECT_NAME.tar"
  artifacts:
    paths:
    - $SUB_PROJECT_NAME.tar
    when: on_success
  needs:
    - lint:python-code

build:phishing:
  <<: *build-image
  variables:
    SUB_PROJECT_NAME: phishing
    SUB_PROJECT_FOLDER: phishing_demo

build:password:
  <<: *build-image
  variables:
    SUB_PROJECT_NAME: password
    SUB_PROJECT_FOLDER: password_demo

build:navigation:
  <<: *build-image
  variables:
    SUB_PROJECT_NAME: navigation
    SUB_PROJECT_FOLDER: demo_navigation
  needs:
    - lint:python-code
    - prepare:navigation

build:python-service:
  stage: build
  image: $REGISTRY_URL/$GROUP_NAME/container-templates/python-windows-service-builder:python-service-buzilder
  script: 
    - cd ./native/msi
    - echo "" >> infos.rtf
    - echo "\pard\sl240\slmult1\f1\fs18 > docker login $REGISTRY_URL\par" >> infos.rtf
    - echo "> docker pull $REGISTRY_URL/$GROUP_NAME/demonstrations/navigation:master\par" >> infos.rtf
    - echo "> docker pull $REGISTRY_URL/$GROUP_NAME/demonstrations/phishing:master\par" >> infos.rtf
    - echo "> docker pull $REGISTRY_URL/$GROUP_NAME/demonstrations/password:master\par" >> infos.rtf
    - echo "}" >> infos.rtf
    - cd ..
    - ls -la
    - pwd
    - bash ./entrypoint-windows.sh $GROUP_NAME
  artifacts:
    paths:
      - /builds/$GROUP_NAME/demonstrations/native/native/dist/windows/*
      - /builds/$GROUP_NAME/demonstrations/native/msi/infos.rtf
  needs: 
    - lint:python-code
    - prepare:navigation

# Scan template
.scan:image: &scan-image
  stage: scan
  image:
    name: aquasec/trivy:latest
  allow_failure: true
  script:
    # Build report
    - trivy 
      --exit-code 0 
      --cache-dir .trivycache/ 
      --no-progress 
      --format template 
      --template "@/contrib/gitlab.tpl" 
      -o gl-container-scanning-report.json 
      --input $SUB_PROJECT_NAME.tar
    # Print report
    - trivy 
      --exit-code 0 
      --cache-dir .trivycache/ 
      --no-progress 
      --input phishing_image.tar
  cache:
    paths:
      - .trivycache/
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
    paths:
      - $SUB_PROJECT_NAME.tar

scan:phishing:
  <<: *scan-image
  variables:
    SUB_PROJECT_NAME: phishing
    SUB_PROJECT_FOLDER: phishing_demo
  needs:
  - build:phishing

scan:password:
  <<: *scan-image
  variables:
    SUB_PROJECT_NAME: password
    SUB_PROJECT_FOLDER: password_demo
  needs:
  - build:password

scan:navigation:
  <<: *scan-image
  variables:
    SUB_PROJECT_NAME: navigation
    SUB_PROJECT_FOLDER: demo_navigation
  needs:
  - build:navigation
  
  
push-phishing-image:
  stage: push
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [""]
  script:
  - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - crane push phishing_image.tar $CI_REGISTRY_IMAGE/phishing:$CI_COMMIT_BRANCH
  needs:
  - scan-phishing-image

